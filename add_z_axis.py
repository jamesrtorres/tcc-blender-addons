bl_info = {
    "name": "Add Z Axis",
    "author": "James Torres",
    "version": (1, 0),
    "blender": (2, 80, 0),
    "location": "View3D > Add > Mesh > New Object",
    "description": "Adds a new Mesh Z Axis",
    "warning": "",
    "doc_url": "",
    "category": "Add Mesh",
}


import bpy
from bpy.types import Operator
from bpy.props import FloatVectorProperty
from bpy_extras.object_utils import AddObjectHelper, object_data_add
from mathutils import Vector


def add_object(self, context):
    scale_x = self.scale.x
    scale_y = self.scale.y
    scale_z = self.scale.z

    list_verts = [Vector((-0.04787299036979675, 0.04174208641052246, 0.6778140664100647)), Vector((-0.04787299036979675, 0.04174208641052246, 0.6778140068054199)), Vector((0.05133488029241562, -0.05746578425168991, 0.6778140068054199)), Vector((-0.032810818403959274, 0.026679933071136475, 0.8623140454292297)), Vector((0.05960728973150253, -0.06573817133903503, 0.8623140454292297)), Vector((0.05960728973150253, -0.06573817133903503, 0.8623141050338745)), Vector((-0.03565236181020737, 0.02952147275209427, 0.8623141050338745)), Vector((0.04884689301252365, -0.054977789521217346, 0.6778140664100647)), Vector((-0.09029939025640488, -0.0006843134760856628, 0.6778140664100647)), Vector((-0.09029939025640488, -0.0006843134760856628, 0.6778140068054199)), Vector((0.008908477611839771, -0.09989218413829803, 0.6778140068054199)), Vector((-0.0752372220158577, -0.015746472403407097, 0.8623140454292297)), Vector((0.017180882394313812, -0.10816457867622375, 0.8623140454292297)), Vector((0.017180882394313812, -0.10816457867622375, 0.8623141050338745)), Vector((-0.07807876169681549, -0.012904928997159004, 0.8623141050338745)), Vector((0.006420486606657505, -0.09740419685840607, 0.6778140664100647)), Vector((-0.09029939025640488, -0.0006843134760856628, 0.6778140664100647)), Vector((-0.09397738426923752, 0.004378005862236023, 0.6839944124221802)), Vector((-0.09591101855039597, 0.01032913476228714, 0.6895697712898254)), Vector((-0.09591101855039597, 0.016586508601903915, 0.693994402885437)), Vector((-0.09397738426923752, 0.022537630051374435, 0.6968352198600769)), Vector((-0.09029939025640488, 0.02759995311498642, 0.6978140473365784)), Vector((-0.07615724951028824, 0.04174209386110306, 0.6978140473365784)), Vector((-0.07109493017196655, 0.0454200878739357, 0.6968352198600769)), Vector((-0.06514380872249603, 0.04735372215509415, 0.693994402885437)), Vector((-0.05888643115758896, 0.04735372215509415, 0.6895697712898254)), Vector((-0.05293530970811844, 0.0454200804233551, 0.6839944124221802)), Vector((-0.04787299036979675, 0.04174208641052246, 0.6778140664100647)), Vector((-0.09029939025640488, -0.0006843134760856628, 0.6778140068054199)), Vector((-0.09397738426923752, 0.004378005862236023, 0.6716337203979492)), Vector((-0.09591101855039597, 0.01032913476228714, 0.6660583019256592)), Vector((-0.09591101855039597, 0.016586508601903915, 0.6616336703300476)), Vector((-0.09397738426923752, 0.022537630051374435, 0.6587929129600525)), Vector((-0.09029939025640488, 0.02759995311498642, 0.6578140258789062)), Vector((-0.07615724951028824, 0.04174209386110306, 0.6578140258789062)), Vector((-0.07109493017196655, 0.0454200878739357, 0.6587929129600525)), Vector((-0.06514380872249603, 0.04735372215509415, 0.6616336703300476)), Vector((-0.05888643115758896, 0.04735372215509415, 0.6660583019256592)), Vector((-0.05293530970811844, 0.0454200804233551, 0.6716337203979492)), Vector((-0.04787299036979675, 0.04174208641052246, 0.6778140068054199)), Vector((0.008908477611839771, -0.09989218413829803, 0.6778140068054199)), Vector((0.017619654536247253, -0.10721903294324875, 0.6716337203979492)), Vector((0.026862457394599915, -0.11244434863328934, 0.6660583019256592)), Vector((0.03573213145136833, -0.11505664139986038, 0.6616336703300476)), Vector((0.04336044564843178, -0.11480019986629486, 0.6587929129600525)), Vector((0.04900068789720535, -0.11170012503862381, 0.6578140258789062)), Vector((0.06314282864332199, -0.09755798429250717, 0.6578140258789062)), Vector((0.06624290347099304, -0.0919177383184433, 0.6587929129600525)), Vector((0.06649934500455856, -0.08428943157196045, 0.6616336703300476)), Vector((0.06388704478740692, -0.07541976124048233, 0.6660583019256592)), Vector((0.05866172909736633, -0.06617695838212967, 0.6716337203979492)), Vector((0.05133488029241562, -0.05746578425168991, 0.6778140068054199)), Vector((-0.0752372220158577, -0.015746472403407097, 0.8623140454292297)), Vector((-0.06652604788541794, -0.023073319345712662, 0.8561336994171143)), Vector((-0.05728324502706528, -0.0282986368983984, 0.850558340549469)), Vector((-0.04841357469558716, -0.030910931527614594, 0.8461337089538574)), Vector((-0.04078526049852371, -0.030654489994049072, 0.8432928919792175)), Vector((-0.03514501452445984, -0.027554413303732872, 0.8423140048980713)), Vector((-0.021002881228923798, -0.013412278145551682, 0.8423140048980713)), Vector((-0.017902804538607597, -0.007772032171487808, 0.8432928919792175)), Vector((-0.017646363005042076, -0.00014371797442436218, 0.8461337089538574)), Vector((-0.02025865763425827, 0.008725956082344055, 0.850558340549469)), Vector((-0.02548396959900856, 0.017968755215406418, 0.8561336994171143)), Vector((-0.032810818403959274, 0.026679933071136475, 0.8623140454292297)), Vector((0.017180882394313812, -0.10816457867622375, 0.8623140454292297)), Vector((0.022243209183216095, -0.1118425726890564, 0.8561336994171143)), Vector((0.028194330632686615, -0.11377620697021484, 0.850558340549469)), Vector((0.03445170447230339, -0.11377621442079544, 0.8461337089538574)), Vector((0.04040282592177391, -0.111842580139637, 0.8432928919792175)), Vector((0.045465145260095596, -0.10816457867622375, 0.8423140048980713)), Vector((0.059607282280921936, -0.09402243793010712, 0.8423140048980713)), Vector((0.06328528374433517, -0.08896012604236603, 0.8432928919792175)), Vector((0.06521891802549362, -0.08300900459289551, 0.8461337089538574)), Vector((0.06521891802549362, -0.07675161957740784, 0.850558340549469)), Vector((0.06328528374433517, -0.07080049812793732, 0.8561336994171143)), Vector((0.05960728973150253, -0.06573817133903503, 0.8623140454292297)), Vector((0.017180882394313812, -0.10816457867622375, 0.8623141050338745)), Vector((0.022243209183216095, -0.1118425726890564, 0.8684943914413452)), Vector((0.028194330632686615, -0.11377620697021484, 0.8740698099136353)), Vector((0.03445170447230339, -0.11377621442079544, 0.8784944415092468)), Vector((0.04040282592177391, -0.111842580139637, 0.8813351988792419)), Vector((0.045465145260095596, -0.10816457867622375, 0.8823140859603882)), Vector((0.059607282280921936, -0.09402243793010712, 0.8823140859603882)), Vector((0.06328528374433517, -0.08896012604236603, 0.8813351988792419)), Vector((0.06521891802549362, -0.08300900459289551, 0.8784944415092468)), Vector((0.06521891802549362, -0.07675161957740784, 0.8740698099136353)), Vector((0.06328528374433517, -0.07080049812793732, 0.8684943914413452)), Vector((0.05960728973150253, -0.06573817133903503, 0.8623141050338745)), Vector((-0.07807876169681549, -0.012904928997159004, 0.8623141050338745)), Vector((-0.08542388677597046, -0.0041754767298698425, 0.8684943914413452)), Vector((-0.09066569060087204, 0.005083806812763214, 0.8740698099136353)), Vector((-0.09329106658697128, 0.013966556638479233, 0.8784944415092468)), Vector((-0.0930430218577385, 0.021603267639875412, 0.8813351988792419)), Vector((-0.08994584530591965, 0.02724641188979149, 0.8823140859603882)), Vector((-0.0758037120103836, 0.04138854891061783, 0.8823140859603882)), Vector((-0.07016056776046753, 0.044485725462436676, 0.8813351988792419)), Vector((-0.06252385675907135, 0.044733770191669464, 0.8784944415092468)), Vector((-0.053641095757484436, 0.04210840165615082, 0.8740698099136353)), Vector((-0.04438181221485138, 0.03686659783124924, 0.8684943914413452)), Vector((-0.03565236181020737, 0.02952147275209427, 0.8623141050338745)), Vector((0.006420486606657505, -0.09740419685840607, 0.6778140664100647)), Vector((-0.0009246328845620155, -0.08867474645376205, 0.6839944124221802)), Vector((-0.006166432984173298, -0.0794154554605484, 0.6895697712898254)), Vector((-0.008791804313659668, -0.07053270936012268, 0.693994402885437)), Vector((-0.008543761447072029, -0.0628959983587265, 0.6968352198600769)), Vector((-0.005446580238640308, -0.057252854108810425, 0.6978140473365784)), Vector((0.008695554919540882, -0.043110720813274384, 0.6978140473365784)), Vector((0.014338693581521511, -0.04001354053616524, 0.6968352198600769)), Vector((0.021975409239530563, -0.03976549580693245, 0.693994402885437)), Vector((0.030858159065246582, -0.042390868067741394, 0.6895697712898254)), Vector((0.04011744260787964, -0.047632671892642975, 0.6839944124221802)), Vector((0.04884689301252365, -0.054977789521217346, 0.6778140664100647)), Vector((0.0, 0.0, 0.00038486719131469727)), Vector((0.0730770081281662, 0.073076993227005, 0.4946148693561554)), Vector((-0.0730770006775856, 0.07307698577642441, 0.4946148693561554)), Vector((9.313225746154785e-10, -2.9802322387695312e-08, 0.6407679319381714)), Vector((-0.0730770006775856, -0.07307702302932739, 0.4946148693561554)), Vector((-0.03653800114989281, 0.036537982523441315, 0.4946148693561554)), Vector((-0.03653800114989281, -0.036538027226924896, 0.4946148693561554)), Vector((0.0730770081281662, -0.07307702302932739, 0.4946148693561554)), Vector((0.036538004875183105, -0.036538027226924896, 0.4946148693561554)), Vector((0.036538004875183105, 0.036537982523441315, 0.4946148693561554))]
    
    verts = []
    for n in range(len(list_verts)):
        verts.append(((list_verts[n][0] * scale_x, list_verts[n][1] * scale_y, list_verts[n][2] * scale_z)))

    edges = []
    
    faces = [[4, 6, 5], [4, 3, 6], [3, 7, 6], [2, 7, 3], [2, 0, 7], [2, 1, 0], [12, 13, 14], [12, 14, 11], [11, 14, 15], [10, 11, 15], [10, 15, 8], [10, 8, 9], [17, 29, 28, 16], [18, 30, 29, 17], [19, 31, 30, 18], [20, 32, 31, 19], [21, 33, 32, 20], [22, 34, 33, 21], [23, 35, 34, 22], [24, 36, 35, 23], [25, 37, 36, 24], [26, 38, 37, 25], [27, 39, 38, 26], [29, 41, 40, 28], [30, 42, 41, 29], [31, 43, 42, 30], [32, 44, 43, 31], [33, 45, 44, 32], [34, 46, 45, 33], [35, 47, 46, 34], [36, 48, 47, 35], [37, 49, 48, 36], [38, 50, 49, 37], [39, 51, 50, 38], [41, 53, 52, 40], [42, 54, 53, 41], [43, 55, 54, 42], [44, 56, 55, 43], [45, 57, 56, 44], [46, 58, 57, 45], [47, 59, 58, 46], [48, 60, 59, 47], [49, 61, 60, 48], [50, 62, 61, 49], [51, 63, 62, 50], [53, 65, 64, 52], [54, 66, 65, 53], [55, 67, 66, 54], [56, 68, 67, 55], [57, 69, 68, 56], [58, 70, 69, 57], [59, 71, 70, 58], [60, 72, 71, 59], [61, 73, 72, 60], [62, 74, 73, 61], [63, 75, 74, 62], [65, 77, 76, 64], [66, 78, 77, 65], [67, 79, 78, 66], [68, 80, 79, 67], [69, 81, 80, 68], [70, 82, 81, 69], [71, 83, 82, 70], [72, 84, 83, 71], [73, 85, 84, 72], [74, 86, 85, 73], [75, 87, 86, 74], [77, 89, 88, 76], [78, 90, 89, 77], [79, 91, 90, 78], [80, 92, 91, 79], [81, 93, 92, 80], [82, 94, 93, 81], [83, 95, 94, 82], [84, 96, 95, 83], [85, 97, 96, 84], [86, 98, 97, 85], [87, 99, 98, 86], [89, 101, 100, 88], [90, 102, 101, 89], [91, 103, 102, 90], [92, 104, 103, 91], [93, 105, 104, 92], [94, 106, 105, 93], [95, 107, 106, 94], [96, 108, 107, 95], [97, 109, 108, 96], [98, 110, 109, 97], [99, 111, 110, 98], [101, 17, 16, 100], [102, 18, 17, 101], [103, 19, 18, 102], [104, 20, 19, 103], [105, 21, 20, 104], [106, 22, 21, 105], [107, 23, 22, 106], [108, 24, 23, 107], [109, 25, 24, 108], [110, 26, 25, 109], [111, 27, 26, 110], [113, 114, 115], [116, 114, 117, 118], [113, 119, 120, 121], [114, 116, 115], [116, 119, 115], [119, 113, 115], [112, 121, 120], [112, 118, 117], [112, 120, 118], [112, 117, 121], [119, 116, 118, 120], [114, 113, 121, 117]]
    
    mesh = bpy.data.meshes.new(name="New Object Mesh")
    mesh.from_pydata(verts, edges, faces)
    # useful for development when the mesh may be invalid.
    # mesh.validate(verbose=True)
    object_data_add(context, mesh, operator=self)


class OBJECT_OT_add_object(Operator, AddObjectHelper):
    """Create a new Mesh Object"""
    bl_idname = "mesh.add_z_axis"
    bl_label = "Add Z Axis Mesh Object"
    bl_options = {'REGISTER', 'UNDO'}

    scale: FloatVectorProperty(
        name="Scale",
        default=(1.0, 1.0, 1.0),
        subtype='TRANSLATION',
        description="scaling",
    )

    def execute(self, context):

        add_object(self, context)

        return {'FINISHED'}


# Registration

def add_object_button(self, context):
    self.layout.operator(
        OBJECT_OT_add_object.bl_idname,
        text="Add Z Axis",
        icon='INDIRECT_ONLY_OFF')


# This allows you to right click on a button and link to documentation
def add_object_manual_map():
    url_manual_prefix = "https://docs.blender.org/manual/en/latest/"
    url_manual_mapping = (
        ("bpy.ops.mesh.add_object", "scene_layout/object/types.html"),
    )
    return url_manual_prefix, url_manual_mapping


def register():
    bpy.utils.register_class(OBJECT_OT_add_object)
    bpy.utils.register_manual_map(add_object_manual_map)
    bpy.types.VIEW3D_MT_mesh_add.append(add_object_button)


def unregister():
    bpy.utils.unregister_class(OBJECT_OT_add_object)
    bpy.utils.unregister_manual_map(add_object_manual_map)
    bpy.types.VIEW3D_MT_mesh_add.remove(add_object_button)


if __name__ == "__main__":
    register()
